module Lexer

from "uint8" include Uint8
from "buffer" include Buffer
from "bigint" include BigInt
from "set" include Set
from "char" include Char
from "string" include String
from "list" include List
from "./iter.gr" include Iter
from "option" include Option
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/offsets" include Offsets
from "result" include Result
from "runtime/dataStructures" include DataStructures
from "runtime/numbers" include Numbers
from "./upper.gr" include Upper
from "./lower.gr" include Lower
from "runtime/unsafe/conv" include Conv
from "buffer" include Buffer
from "float64" include Float64
from "runtime/atof/parse" include Parse as Atof

use Upper.{ upper_set }
use Lower.{ lower_set }
use Set.Immutable.{ type Set }
use Iter.{ type Iter, type IterResult, to_state, return_, yield_ }
use Conv.{ wasmI32ToNumber }
use Buffer.{ type Buffer }

provide type CodePoint = Number

provide enum Token {
  Name(String, Number),
  Type(String, Number),
  Symbol(String, Number),
  Keyword(String, Number),
  // value, signed, size, offset
  Integer(BigInt, Bool, Number, Number),
  Float(Float64, Number),
  Whitespace(Number),
  Unknown(Number),
  EOF(Number),
}

provide type CodePointIter = Iter<(CodePoint, Number)>

provide type CodePointPredicate = CodePoint => Bool

provide let (|.) = (left: CodePointPredicate, right: CodePointPredicate) =>
  (c: CodePoint) => left(c) || right(c)

provide let (&.) = (left: CodePointPredicate, right: CodePointPredicate) =>
  (c: CodePoint) => left(c) && right(c)

provide let exactly = (c: CodePoint) => (c2: CodePoint) => c == c2
provide let range = (start: CodePoint, end: CodePoint) =>
  (c: CodePoint) => c >= start && c <= end

let _a = Char.code('a')
let _b = Char.code('b')
let _e = Char.code('e')
let _f = Char.code('f')
let _o = Char.code('o')
let _x = Char.code('x')
let _z = Char.code('z')

let _A = Char.code('A')
let _F = Char.code('F')
let _Z = Char.code('Z')

let _u = Char.code('u')
let _s = Char.code('s')
let _S = Char.code('S')
let _l = Char.code('l')
let _L = Char.code('L')

let _0 = Char.code('0')
let _1 = Char.code('1')
let _7 = Char.code('7')
let _9 = Char.code('9')
let _underscore = Char.code('_')
let _single_quote = Char.code('\'')
let _double_quote = Char.code('"')
let _backtick = Char.code('`')

// Single Character Reserved Symbols
let _right_bracket = Char.code(']')
let _left_bracket = Char.code('[')
let _right_paren = Char.code(')')
let _left_paren = Char.code('(')
let _right_brace = Char.code('}')
let _left_brace = Char.code('{')
let _comma = Char.code(',')

let reserved_symbols = Set.Immutable.fromList(
  [
    _right_bracket,
    _left_bracket,
    _right_paren,
    _left_paren,
    _right_brace,
    _left_brace,
    _comma,
  ]
)

let is_reserved_symbol = (c: CodePoint) =>
  Set.Immutable.contains(c, reserved_symbols)

// Multi Character Symbols
let _hyphen = Char.code('-')
let _dot = Char.code('.')
let _slash = Char.code('/')
let _backslash = Char.code('\\')
let _pipe = Char.code('|')
let _forward_slash = Char.code('/')
let _exclamation = Char.code('!')
let _question = Char.code('?')
let _at = Char.code('@')
let _hash = Char.code('#')
let _dollar = Char.code('$')
let _percent = Char.code('%')
let _caret = Char.code('^')
let _ampersand = Char.code('&')
let _asterisk = Char.code('*')
let _plus = Char.code('+')
let _minus = Char.code('-')
let _equals = Char.code('=')
let _less_than = Char.code('<')
let _greater_than = Char.code('>')
let _semicolon = Char.code(';')
let _colon = Char.code(':')
let _tilde = Char.code('~')

let multi_char_symbols = Set.Immutable.fromList(
  [
    _hyphen,
    _dot,
    _slash,
    _backslash,
    _pipe,
    _forward_slash,
    _exclamation,
    _question,
    _at,
    _hash,
    _dollar,
    _percent,
    _caret,
    _ampersand,
    _asterisk,
    _plus,
    _minus,
    _equals,
    _less_than,
    _greater_than,
    _semicolon,
    _colon,
    _tilde,
  ]
)

let is_multi_char_symbol = (c: CodePoint) =>
  Set.Immutable.contains(c, multi_char_symbols)

// whitespace
let _carriage_return = Char.code('\r')
let _sp = Char.code(' ')
let _tab = Char.code('\t')
let _newline = Char.code('\n')
let _nbsp = 0xA0
let _osm = 0x2000
let _enqd = 0x2001
let _emqd = 0x2002
let _ensp = 0x2003
let _emsp = 0x2004
let _tpesp = 0x2005
let _fpesp = 0x2006
let _spesp = 0x2007
let _fsp = 0x2008
let _psp = 0x2009
let _thsp = 0x200A
let _hsp = 0x202F
let _nnbsp = 0x205F
let _mssp = 0x3000

provide let is_whitespace = exactly(_tab)
  |. exactly(_newline)
  |. exactly(_carriage_return)
  |. exactly(_sp)
  |. exactly(_nbsp)

  // These codepoints are consecutive
  |. range(_osm, _thsp)
  // |. exactly(_osm)
  // |. exactly(_enqd)
  // |. exactly(_emqd)
  // |. exactly(_ensp)
  // |. exactly(_emsp)
  // |. exactly(_tpesp)
  // |. exactly(_fpesp)
  // |. exactly(_spesp)
  // |. exactly(_fsp)
  // |. exactly(_psp)
  // |. exactly(_thsp)

  |. exactly(_hsp)
  |. exactly(_nnbsp)
  |. exactly(_mssp)

provide let is_0 = exactly(_0)

provide let is_underscore = exactly(_underscore)
provide let is_hyphen = exactly(_hyphen)
provide let is_dot = exactly(_dot)
provide let is_slash = exactly(_slash)
provide let is_backslash = exactly(_backslash)
provide let is_pipe = exactly(_pipe)
provide let is_forward_slash = exactly(_forward_slash)
provide let is_right_bracket = exactly(_right_bracket)
provide let is_left_bracket = exactly(_left_bracket)
provide let is_right_paren = exactly(_right_paren)
provide let is_left_paren = exactly(_left_paren)
provide let is_right_brace = exactly(_right_brace)
provide let is_left_brace = exactly(_left_brace)
provide let is_single_quote = exactly(_single_quote)
provide let is_double_quote = exactly(_double_quote)
provide let is_backtick = exactly(_backtick)
provide let is_exclamation = exactly(_exclamation)
provide let is_question = exactly(_question)
provide let is_at = exactly(_at)
provide let is_hash = exactly(_hash)
provide let is_dollar = exactly(_dollar)
provide let is_percent = exactly(_percent)
provide let is_caret = exactly(_caret)
provide let is_ampersand = exactly(_ampersand)
provide let is_asterisk = exactly(_asterisk)
provide let is_plus = exactly(_plus)
provide let is_minus = exactly(_minus)
provide let is_equals = exactly(_equals)
provide let is_less_than = exactly(_less_than)
provide let is_greater_than = exactly(_greater_than)
provide let is_comma = exactly(_comma)
provide let is_semicolon = exactly(_semicolon)
provide let is_colon = exactly(_colon)
provide let is_tilde = exactly(_tilde)

provide let not = (pred: CodePointPredicate) => (c: CodePoint) => !pred(c)
provide let is_even = (c: CodePoint) => (c & 1) == 0
provide let is_odd = not(is_even)

let sizeof_codepoint = (code_point: CodePoint) => {
  if (code_point < 0x7F) {
    1
  } else if (code_point < 0x7FF) {
    2
  } else if (code_point < 0xFFFF) {
    3
  } else {
    4
  }
}
let code_points_to_string = (code_points: List<CodePoint>) => {
  let string_size = List.reduce(
    (acc, code_point) => sizeof_codepoint(code_point) + acc,
    0,
    code_points
  )

  let buffer = Buffer.make(string_size)

  List.reduce(
    (buffer, code_point) => match (sizeof_codepoint(code_point)) {
      1 => {
        Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
        buffer
      },
      2 => {
        let first = Uint8.fromNumber(0b11000000 | code_point >> 6)
        let second = Uint8.fromNumber(0b10000000 | code_point & 0b00111111)
        Buffer.addUint8(first, buffer)
        Buffer.addUint8(second, buffer)
        buffer
      },
      3 => {
        let first = Uint8.fromNumber(0b11100000 | code_point >> 12)
        let second = Uint8.fromNumber(0b10000000 | code_point >> 6 & 0b00111111)
        let third = Uint8.fromNumber(0b10000000 | code_point & 0b00111111)
        Buffer.addUint8(first, buffer)
        Buffer.addUint8(second, buffer)
        Buffer.addUint8(third, buffer)
        buffer
      },
      4 => {
        let first = Uint8.fromNumber(0b11110000 | code_point >> 18)
        let second = Uint8.fromNumber(
          0b10000000 | code_point >> 12 & 0b00111111
        )
        let third = Uint8.fromNumber(0b10000000 | code_point >> 6 & 0b00111111)
        let fourth = Uint8.fromNumber(0b10000000 | code_point & 0b00111111)
        Buffer.addUint8(first, buffer)
        Buffer.addUint8(second, buffer)
        Buffer.addUint8(third, buffer)
        Buffer.addUint8(fourth, buffer)
        buffer
      },
      _ => fail "Invalid code point: " ++ toString(code_point),
    },
    buffer,
    code_points
  )

  Buffer.toString(buffer)
}

@unsafe
let charCodeAt = (offset: Number, input: String) => {
  use WasmI32.{
    (+) as (+.),
    (&) as (&.),
    (|) as (|.),
    (<<) as (<<.),
    (==) as (==.),
    geU as (>=.),
    ltU as (<.),
    leU as (<=.),
    toGrain,
    fromGrain,
    load8U,
    load,
  }
  use Numbers.{ coerceNumberToWasmI32 }
  use Offsets.{ _STR_LEN_OFFSET, _STR_DATA_OFFSET }
  let ptr = fromGrain(input)
  let length = coerceNumberToWasmI32(String.byteLength(input))
  let offset = coerceNumberToWasmI32(offset)

  if (offset >=. length)
    fail "Invalid offset: " ++ toString(wasmI32ToNumber(offset))

  let mut result = 0n
  let mut advance = 0n
  let first = load8U(ptr, _STR_DATA_OFFSET +. offset)

  match (first) {
    first when first <. 0x7Fn => {
      result = first
      advance = 1n
    },
    first when (first &. 0b11100000n) ==. 0b11000000n => {
      let second = load8U(ptr, _STR_DATA_OFFSET +. offset +. 1n)
      result = (first &. 0b00011111n) <<. 6n |. second &. 0b00111111n
      advance = 2n
    },
    first when (first &. 0b11110000n) ==. 0b11100000n => {
      let second = load8U(ptr, _STR_DATA_OFFSET +. offset +. 1n)
      let third = load8U(ptr, _STR_DATA_OFFSET +. offset +. 2n)
      result = (first &. 0b00001111n) <<. 12n
        |. (second &. 0b00111111n) <<. 6n
        |. third &. 0b00111111n
      advance = 3n
    },
    first when (first &. 0b11111000n) ==. 0b11110000n => {
      let second = load8U(ptr, _STR_DATA_OFFSET +. offset +. 1n)
      let third = load8U(ptr, _STR_DATA_OFFSET +. offset +. 2n)
      let fourth = load8U(ptr, _STR_DATA_OFFSET +. offset +. 3n)
      result = (first &. 0b00000111n) <<. 18n
        |. (second &. 0b00111111n) <<. 12n
        |. (third &. 0b00111111n) <<. 6n
        |. fourth &. 0b00111111n
      advance = 4n
    },
    _otherwise =>
      fail "Invalid UTF-8 sequence: " ++ toString(wasmI32ToNumber(first)),
  }
  ignore(input)

  match (result) {
    result when result >=. 0xD800n && result <=. 0xDFFFn => {
      let value = wasmI32ToNumber(advance)
      (0xFFFD: CodePoint, value)
    },
    result => {
      let value = wasmI32ToNumber(result)
      let next = wasmI32ToNumber(advance)
      (value, next)
    },
  }
}

provide let is_digit = range(_0, _9)
provide let is_lower = (c: CodePoint) => Set.Immutable.contains(c, lower_set)
provide let is_upper = (c: CodePoint) => Set.Immutable.contains(c, upper_set)

provide let is_letter = is_upper |. is_lower
provide let is_id_start = is_underscore |. is_lower
provide let is_id_continue = is_id_start |. is_digit
provide let is_type_start = is_upper
provide let is_type_continue = is_upper |. is_lower |. is_digit

provide let is_lower_hex_letter = range(_a, _f)
provide let is_upper_hex_letter = range(_A, _F)
provide let is_hex_letter = is_lower_hex_letter |. is_upper_hex_letter
provide let is_hex = is_digit |. is_hex_letter
provide let is_octal = range(_0, _7)
provide let is_binary = exactly(_0) |. exactly(_1)

provide let is_e = exactly(_e)
provide let is_u = exactly(_u)
provide let is_s = exactly(_s)
provide let is_S = exactly(_S)
provide let is_l = exactly(_l)
provide let is_L = exactly(_L)
provide let is_x = exactly(_x)
provide let is_o = exactly(_o)
provide let is_b = exactly(_b)

provide let to_codepoint_iter = (input: String) => {
  Iter.unfold(
    (input, 0, String.byteLength(input)),
    ((input, offset, length)) => {
      if (offset < length) {
        let (code_point, advance) = charCodeAt(offset, input)
        let result = (code_point, offset)
        let next_state = (input, offset + advance, length)
        if (offset + advance <= length) {
          Some((next_state, result))
        } else {
          None
        }
      } else {
        None
      }
    }
  )
}

let decimal_codepoint_to_bigint = (code_point: CodePoint) => {
  assert is_digit(code_point)
  BigInt.fromNumber(code_point - _0)
}

let hex_codepoint_to_bigint = (code_point: CodePoint) => {
  use BigInt.{ (+) as (+.), fromNumber }
  assert is_hex(code_point)
  match (code_point) {
    _ when is_digit(code_point) => BigInt.fromNumber(code_point - _0),
    _ when is_lower_hex_letter(code_point) =>
      fromNumber(code_point - _a) +. 10t,
    _ when is_upper_hex_letter(code_point) =>
      fromNumber(code_point - _A) +. 10t,
    _ => fail "Not a hex letter: " ++ toString(code_point),
  }
}

let octal_codepoint_to_bigint = (code_point: CodePoint) => {
  assert is_octal(code_point)
  BigInt.fromNumber(code_point - _0)
}

let binary_codepoint_to_bigint = (code_point: CodePoint) => {
  assert is_binary(code_point)
  BigInt.fromNumber(code_point - _0)
}

provide enum TokenState {
  Start,
  LexWhitespace(Number),
  LexName(List<CodePoint>, Number),
  LexType(List<CodePoint>, Number),
  LexMinus(Number),
  // Whenever we encounter a `0`, it could be followed by a hex, octal, or binary number.
  // Or it could just be `0`
  LexZeroStart(Number, Bool), // Offset, negative
  LexHex(Number, Bool, BigInt), // Offset, negative, value
  LexOctal(Number, Bool, BigInt),
  LexBinary(Number, Bool, BigInt),
  LexDecimal(Number, Bool, BigInt),
  LexFloatFractionPartStart(Number, Buffer), // offset, pointer, integer
  LexFloatFractionPart(Number, Buffer), // offset, negative, integer, fraction
  LexFloatExponentPartMaybeNegative(Number, Buffer), // offset, negative, integer, fraction
  LexFloatExponentPartStart(Number, Buffer), // offset, negative, integer, fraction, exponent_negative
  LexFloatExponentPart(Number, Buffer), // offset, negative, integer, fraction, negative_exponent, exponent
  FinalizeInteger(Number, Bool, BigInt), // Offset, value
  FinalizeIntegerUnsigned(Number, Bool, BigInt), // Offset, value
  LexMultiCharSymbol(Number, List<CodePoint>), // Offset, code points
  UnknownTokenKind(Number),
}

provide type CodePointAccumulator = (TokenState, Number)

provide let code_point_transformer = (
  code_points: Iter<(CodePoint, Number)>,
  map_token=identity,
) => {
  let iterator = Iter.transform(
    (state, (code_point, offset)) => match (state) {
      // Starting state
      Start => match (void) {
        _ when is_whitespace(code_point) => to_state(LexWhitespace(offset)),
        _ when is_id_start(code_point) =>
          to_state(LexName([code_point], offset)),
        _ when is_type_start(code_point) =>
          to_state(LexType([code_point], offset)),
        _ when is_0(code_point) => to_state(LexZeroStart(offset, false)),
        _ when is_digit(code_point) =>
          to_state(
            LexDecimal(offset, false, decimal_codepoint_to_bigint(code_point))
          ),
        _ when is_minus(code_point) => to_state(LexMinus(offset)),
        _ when is_multi_char_symbol(code_point) =>
          to_state(LexMultiCharSymbol(offset, [code_point])),
        _ when is_reserved_symbol(code_point) =>
          yield_(Symbol(code_points_to_string([code_point]), offset), Start),
        _ => to_state(UnknownTokenKind(offset)),
      },

      // Lexing a whitespace token
      LexWhitespace(offset) => match (void) {
        _ when is_whitespace(code_point) => to_state(LexWhitespace(offset)),
        _ => yield_(Whitespace(offset), Start, advance=false),
      },

      // Lexing a name token
      LexName(code_points, offset) => match (void) {
        _ when is_id_continue(code_point) =>
          to_state(LexName([code_point, ...code_points], offset)),
        _ =>
          yield_(
            Name(code_points_to_string(List.reverse(code_points)), offset),
            Start,
            advance=false
          ),
      },
      LexType(code_points, offset) => match (void) {
        _ when is_type_continue(code_point) =>
          to_state(LexType([code_point, ...code_points], offset)),
        _ =>
          yield_(
            Type(code_points_to_string(List.reverse(code_points)), offset),
            Start,
            advance=false
          ),
      },
      LexZeroStart(offset, negative) => match (void) {
        _ when is_x(code_point) => to_state(LexHex(offset, negative, 0t)),
        _ when is_o(code_point) => to_state(LexOctal(offset, negative, 0t)),
        _ when is_b(code_point) => to_state(LexBinary(offset, negative, 0t)),
        _ when is_dot(code_point) => {
          let buffer = Buffer.make(1024)
          if (negative) {
            Buffer.addUint8(Uint8.fromNumber(_minus), buffer)
          }
          Buffer.addUint8(Uint8.fromNumber(_0), buffer)
          to_state(LexFloatFractionPartStart(offset, buffer))
        },
        _ => to_state(FinalizeInteger(offset, false, 0t), advance=false),
      },
      LexHex(offset, negative, value) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_hex(code_point) =>
            to_state(
              LexHex(
                offset,
                negative,
                value *. 16t +. hex_codepoint_to_bigint(code_point),
              )
            ),
          _ =>
            to_state(FinalizeInteger(offset, negative, value), advance=false),
        }
      },
      LexOctal(offset, negative, value) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (code_point) {
          _ when is_octal(code_point) =>
            to_state(
              LexOctal(
                offset,
                negative,
                value *. 8t +. octal_codepoint_to_bigint(code_point),
              )
            ),
          _ =>
            to_state(FinalizeInteger(offset, negative, value), advance=false),
        }
      },
      LexBinary(offset, negative, value) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_binary(code_point) =>
            to_state(
              LexBinary(
                offset,
                negative,
                value *. 2t +. binary_codepoint_to_bigint(code_point),
              )
            ),
          _ =>
            to_state(FinalizeInteger(offset, negative, value), advance=false),
        }
      },
      LexDecimal(offset, negative, value) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_digit(code_point) =>
            to_state(
              LexDecimal(
                offset,
                negative,
                value *. 10t +. decimal_codepoint_to_bigint(code_point),
              )
            ),
          _ when is_dot(code_point) => {
            let buffer = Buffer.make(1024)
            if (negative) {
              Buffer.addUint8(Uint8.fromNumber(_minus), buffer)
            }
            Buffer.addString(toString(value), buffer)
            to_state(LexFloatFractionPartStart(offset, buffer))
          },
          _ =>
            to_state(FinalizeInteger(offset, negative, value), advance=false),
        }
      },
      LexMinus(offset) => match (void) {
        _ when is_0(code_point) => to_state(LexZeroStart(offset, true)),
        _ when is_digit(code_point) =>
          to_state(
            LexDecimal(offset, true, decimal_codepoint_to_bigint(code_point))
          ),
        _ when is_multi_char_symbol(code_point) =>
          to_state(LexMultiCharSymbol(offset, [code_point, _minus])),
        // Whatever follows needs to be "re-lexed," so yield the symbol, but retry the current value
        // with a new state.
        _ => yield_(Symbol("-", offset), Start, advance=false),
      },
      LexMultiCharSymbol(offset, code_points) => match (void) {
        _ when is_multi_char_symbol(code_point) =>
          to_state(
            LexMultiCharSymbol(offset, [code_point, ...code_points]),
            advance=false
          ),
        // Whatever follows needs to be "re-lexed," so yield the symbol, but retry the current value
        // with a new state.
        _ =>
          yield_(
            Symbol(code_points_to_string(List.reverse(code_points)), offset),
            Start,
            advance=false
          ),
      },
      LexFloatFractionPartStart(offset, buffer) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_digit(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatFractionPart(offset, buffer))
          },
          _ => to_state(UnknownTokenKind(offset)),
        }
      },

      // Floats
      LexFloatFractionPart(offset, buffer) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_digit(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatFractionPart(offset, buffer))
          },
          _ when is_e(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatExponentPartMaybeNegative(offset, buffer))
          },
          // Whatever follows needs to be "re-lexed," so yield the symbol, but retry the current value
          _ => match (Atof.parseFloat(Buffer.toString(buffer))) {
            Ok(value) =>
              // with a new state.
              yield_(
                Float(Float64.fromNumber(value), offset),
                Start,
                advance=false
              ),
            Err(t) => to_state(UnknownTokenKind(offset), advance=false),
          },
        }
      },
      LexFloatExponentPartMaybeNegative(offset, buffer) => {
        match (void) {
          _ when is_plus(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatExponentPartStart(offset, buffer))
          },
          _ when is_minus(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatExponentPartStart(offset, buffer))
          },
          _ when is_digit(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatExponentPart(offset, buffer))
          },
          _ => to_state(UnknownTokenKind(offset)),
        }
      },
      LexFloatExponentPartStart(offset, buffer) => match (void) {
        _ when is_digit(code_point) => {
          Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
          to_state(LexFloatExponentPart(offset, buffer))
        },
        _ => to_state(UnknownTokenKind(offset)),
      },
      LexFloatExponentPart(offset, buffer) => {
        use BigInt.{ (+) as (+.), (*) as (*.) }
        match (void) {
          _ when is_digit(code_point) => {
            Buffer.addUint8(Uint8.fromNumber(code_point), buffer)
            to_state(LexFloatExponentPart(offset, buffer))
          },
          // Whatever follows needs to be "re-lexed," so yield the symbol, but retry the current value
          // with a new state.
          _ => match (Atof.parseFloat(Buffer.toString(buffer))) {
            Ok(value) =>
              yield_(
                Float(Float64.fromNumber(value), offset),
                Start,
                advance=false
              ),
            Err(t) => to_state(UnknownTokenKind(offset), advance=false),
          },
        }
      },
      FinalizeInteger(offset, negative, value) => {
        use BigInt.{ neg as (-) }
        let value = if (negative) (-)(value) else value
        match (void) {
          _ when is_u(code_point) =>
            to_state(FinalizeIntegerUnsigned(offset, negative, value)),
          _ when is_s(code_point) =>
            yield_(Integer(value, true, 8, offset), Start),
          _ when is_S(code_point) =>
            yield_(Integer(value, true, 16, offset), Start),
          _ when is_l(code_point) =>
            yield_(Integer(value, true, 32, offset), Start),
          _ when is_L(code_point) =>
            yield_(Integer(value, true, 64, offset), Start),
          _ => yield_(Integer(value, true, 32, offset), Start, advance=false),
        }
      },
      FinalizeIntegerUnsigned(offset, negative, value) => {
        match (void) {
          _ when is_s(code_point) =>
            yield_(Integer(value, false, 8, offset), Start),
          _ when is_S(code_point) =>
            yield_(Integer(value, false, 16, offset), Start),
          _ when is_l(code_point) =>
            yield_(Integer(value, false, 32, offset), Start),
          _ when is_L(code_point) =>
            yield_(Integer(value, false, 64, offset), Start),
          _ => to_state(UnknownTokenKind(offset)),
        }
      },
      UnknownTokenKind(offset) => match (code_point) {
        _ when !is_whitespace(code_point) => to_state(UnknownTokenKind(offset)),
        _ => yield_(Unknown(offset), Start, advance=false),
      },
    },
    Start,
    code_points,
    flush=state => {
      use BigInt.{ neg as (-) }
      match (state) {
        Start => None,
        LexWhitespace(offset) => Some(Whitespace(offset)),
        LexName(code_points, offset) =>
          Some(Name(code_points_to_string(List.reverse(code_points)), offset)),
        LexType(code_points, offset) =>
          Some(Type(code_points_to_string(List.reverse(code_points)), offset)),
        LexMinus(offset) => Some(Symbol("-", offset)),
        // Whenever we encounter a `0`, it could be followed by a hex, octal, or binary number.
        // Or it could just be `0`
        LexZeroStart(offset, negative) => Some(Integer(0t, true, 32, offset)), // Offset, negative
        LexHex(offset, negative, value) =>
          Some(Integer(if (negative) (-)(value) else value, true, 32, offset)), // Offset, negative, value
        LexOctal(offset, negative, value) =>
          Some(Integer(if (negative) (-)(value) else value, true, 32, offset)),
        LexBinary(offset, negative, value) =>
          Some(Integer(if (negative) (-)(value) else value, true, 32, offset)),
        LexDecimal(offset, negative, value) =>
          Some(Integer(if (negative) (-)(value) else value, true, 32, offset)),
        LexFloatFractionPartStart(offset, _buffer) => Some(Unknown(offset)), // e.x. "123."
        LexFloatFractionPart(offset, buffer) =>
          match (Atof.parseFloat(Buffer.toString(buffer))) {
            Ok(value) => Some(Float(Float64.fromNumber(value), offset)),
            Err(t) => Some(Unknown(offset)),
          },
        LexFloatExponentPartMaybeNegative(offset, _buffer) =>
          Some(Unknown(offset)), // offset, negative, integer, fraction
        LexFloatExponentPartStart(offset, _buffer) => Some(Unknown(offset)),
        LexFloatExponentPart(offset, buffer) =>
          match (Atof.parseFloat(Buffer.toString(buffer))) {
            Ok(value) => Some(Float(Float64.fromNumber(value), offset)),
            Err(t) => Some(Unknown(offset)),
          },
        FinalizeInteger(offset, negative, value) =>
          Some(Integer(if (negative) (-)(value) else value, true, 32, offset)), // Offset, value
        FinalizeIntegerUnsigned(offset, _negative, _value) =>
          Some(Unknown(offset)), // e.x. "32u" (missing kind)
        LexMultiCharSymbol(offset, code_points) =>
          Some(Symbol(code_points_to_string(List.reverse(code_points)), offset)), // Offset, code points
        UnknownTokenKind(offset) => Some(Unknown(offset)),
      }
    }
  )

  Iter.map(map_token, iterator)
}

provide let lex = (
  input: String,
  keywords: Set<String> = Set.Immutable.fromList([]),
) =>
  code_point_transformer(
    to_codepoint_iter(input),
    map_token=token => match (token) {
      Name(name, offset) when Set.Immutable.contains(name, keywords) =>
        Keyword(name, offset),
      t => t,
    }
  )
